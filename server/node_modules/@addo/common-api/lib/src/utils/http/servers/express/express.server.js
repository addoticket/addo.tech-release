"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpressServer = void 0;
const express_1 = __importDefault(require("express"));
const node_cron_1 = __importDefault(require("node-cron"));
const body_parser_1 = __importDefault(require("body-parser"));
class ExpressServer {
    /**
     * Create a Express server with all routes
     *
     * @example
     * import { Response } from "../../models/response";
     * import { ExpressServer } from "./express.server";
     * import { ExpressJsMicroservice, HttpMethod } from "./expressjs.microservice";
     *
     * let endpoint = new ExpressJsMicroservice(
     *    { method: HttpMethod.GET, route: '/hello-world' },
     *    (http) => Promise.resolve<Response<string>>(new Response<string>('Hello world'))
     * );
     * let endpoint1 = new ExpressJsMicroservice(
     *    { method: HttpMethod.GET, route: '/hello-galaxy' },
     *    (http) => Promise.resolve<Response<string>>(new Response<string>('Hello galaxy'))
     * );
     *
     * let server = new ExpressServer(endpoint, endpoint1);
     * server.addMicroservice(
     *    new ExpressJsMicroservice(
     *        { method: HttpMethod.GET, route: '/hello-universe' },
     *        (http) => Promise.resolve<Response<string>>(new Response<string>('Hello universe!'))
     *    )
     * );
     * server.start(8080);
     */
    constructor(...endpoints) {
        this.routes = [];
        this.cronJobs = [];
        console.log(`Creating Express app`);
        this.app = express_1.default();
        this.app.use(body_parser_1.default.urlencoded({ extended: true }));
        this.app.use(body_parser_1.default.json());
        console.log(`Created Express app`);
        for (let microservice of endpoints) {
            this.addMicroservice(microservice);
        }
    }
    getRoutes() {
        return this.routes;
    }
    start(port = null) {
        // let routes = []
        // this.app._router.stack.forEach((r) => {
        //     if (r.route && r.route.path) {
        //         routes.push(r.route);
        //     }
        // })
        this.app.get('/docs/routes', (req, res) => {
            res.status(200).json(this.routes);
        });
        console.log(`======== ROUTES ========`);
        for (let route of this.routes) {
            console.log(`[${route.method}] ${route.route}`);
        }
        console.log(`========================`);
        this.app.listen(port || process.env.PORT, () => console.log(`Express app listening on port ${port || process.env.PORT}!`));
    }
    addMicroservice(microservice) {
        console.log(`Add new route: [${microservice.config.method}] ${microservice.config.route}`);
        this.app[microservice.config.method](microservice.config.route, microservice.getHandler());
        this.routes.push(microservice.config);
    }
    addCronJob(cronExpr, func) {
        if (node_cron_1.default.validate(cronExpr)) {
            this.cronJobs.push(node_cron_1.default.schedule(cronExpr, func));
            return true;
        }
        console.warn(`CronJob with ${cronExpr} was not valid!`);
        return false;
    }
}
exports.ExpressServer = ExpressServer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzcy5zZXJ2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvdXRpbHMvaHR0cC9zZXJ2ZXJzL2V4cHJlc3MvZXhwcmVzcy5zZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsc0RBQThCO0FBQzlCLDBEQUFnRDtBQUVoRCw4REFBcUM7QUFFckMsTUFBYSxhQUFhO0lBTXRCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BeUJHO0lBQ0gsWUFBWSxHQUFHLFNBQTRDO1FBN0JuRCxXQUFNLEdBQXFCLEVBQUUsQ0FBQztRQUM5QixhQUFRLEdBQW9CLEVBQUUsQ0FBQztRQTZCbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxHQUFHLEdBQUcsaUJBQU8sRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLHFCQUFVLENBQUMsVUFBVSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN4RCxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxxQkFBVSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFFaEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQ25DLEtBQUssSUFBSSxZQUFZLElBQUksU0FBUyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDdEM7SUFDTCxDQUFDO0lBRUQsU0FBUztRQUNMLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBRUQsS0FBSyxDQUFDLE9BQWUsSUFBSTtRQUNyQixrQkFBa0I7UUFDbEIsMENBQTBDO1FBQzFDLHFDQUFxQztRQUNyQyxnQ0FBZ0M7UUFDaEMsUUFBUTtRQUNSLEtBQUs7UUFDTCxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFFdEMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3RDLENBQUMsQ0FBQyxDQUFBO1FBRUYsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1FBQ3hDLEtBQUssSUFBSSxLQUFLLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUMzQixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztTQUNuRDtRQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsMEJBQTBCLENBQUMsQ0FBQztRQUV4QyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQzNDLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUNBQWlDLElBQUksSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDLENBQzVFLENBQUM7SUFDTixDQUFDO0lBRUQsZUFBZSxDQUFDLFlBQTZDO1FBQ3pELE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLFlBQVksQ0FBQyxNQUFNLENBQUMsTUFBTSxLQUFLLFlBQVksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUMzRixJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsWUFBWSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7UUFDM0YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRCxVQUFVLENBQUMsUUFBZ0IsRUFBRSxJQUFnQjtRQUN6QyxJQUFJLG1CQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3pCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLG1CQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ2xELE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFDRCxPQUFPLENBQUMsSUFBSSxDQUFDLGdCQUFnQixRQUFRLGlCQUFpQixDQUFDLENBQUE7UUFDdkQsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQztDQUNKO0FBckZELHNDQXFGQyJ9