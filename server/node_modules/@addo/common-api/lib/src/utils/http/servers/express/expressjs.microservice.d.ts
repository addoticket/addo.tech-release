import { Microservice } from "../../microservice";
import { Response } from "../../models/response";
import { HttpRequest, Request } from "../../models/http.request";
import Express from "express";
export declare class ExpressJsMicroservice<T, R> extends Microservice<T, R> {
    config: EndpointConfig;
    constructor(config: EndpointConfig, handler: (http: HttpRequest<T>) => Promise<Response<R>>);
    parseRequest(request: Express.Request): HttpRequest<T>;
    getAHandler(request: Express.Request, response: Express.Response): Promise<Response<R>>;
    getHandler(): (request: Express.Request, response: Express.Response) => void;
}
export declare class EndpointConfig {
    route: string;
    method: HttpMethod | string;
    constructor(route: string, method: HttpMethod | string);
}
export declare enum HttpMethod {
    GET = "get",
    POST = "post",
    PUT = "put",
    PATCH = "patch",
    DELETE = "delete"
}
