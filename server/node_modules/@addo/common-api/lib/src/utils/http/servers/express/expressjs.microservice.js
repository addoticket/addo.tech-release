"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpMethod = exports.EndpointConfig = exports.ExpressJsMicroservice = void 0;
const microservice_1 = require("../../microservice");
const response_1 = require("../../models/response");
const http_request_1 = require("../../models/http.request");
class ExpressJsMicroservice extends microservice_1.Microservice {
    constructor(config, handler) {
        super(handler);
        this.config = config;
    }
    parseRequest(request) {
        let req = new http_request_1.Request();
        req.queryStringParameters = request.query;
        req.pathParameters = request.params;
        req.headers = JSON.parse(JSON.stringify(request.headers));
        req.body = request.body;
        req.original = request;
        return new http_request_1.HttpRequest(req);
    }
    async getAHandler(request, response) {
        this.http = this.parseRequest(request);
        let result = await this.handle(this.http);
        return result;
    }
    getHandler() {
        return (request, response) => {
            this.getAHandler(request, response)
                .then(res => {
                for (let key in res.headers) {
                    response.setHeader(key, res.headers[key]);
                }
                response.status(res.statusCode).send(res.body);
            }).catch(err => {
                if (err instanceof response_1.Response) {
                    for (let key in err.headers) {
                        response.setHeader(key, err.headers[key]);
                    }
                    response.status(err.statusCode).send(err.body);
                    return;
                }
                response.status(500).send({ code: "_GENERIC_ERROR", err, message: err.message });
            });
        };
    }
}
exports.ExpressJsMicroservice = ExpressJsMicroservice;
class EndpointConfig {
    constructor(route, method) {
        this.route = route;
        this.method = method;
    }
}
exports.EndpointConfig = EndpointConfig;
var HttpMethod;
(function (HttpMethod) {
    HttpMethod["GET"] = "get";
    HttpMethod["POST"] = "post";
    HttpMethod["PUT"] = "put";
    HttpMethod["PATCH"] = "patch";
    HttpMethod["DELETE"] = "delete";
})(HttpMethod = exports.HttpMethod || (exports.HttpMethod = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzc2pzLm1pY3Jvc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy91dGlscy9odHRwL3NlcnZlcnMvZXhwcmVzcy9leHByZXNzanMubWljcm9zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLHFEQUFrRDtBQUNsRCxvREFBaUQ7QUFDakQsNERBQWlFO0FBR2pFLE1BQWEscUJBQTRCLFNBQVEsMkJBQWtCO0lBR2pFLFlBQVksTUFBc0IsRUFBRSxPQUF1RDtRQUN6RixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBRUQsWUFBWSxDQUFDLE9BQXdCO1FBQ25DLElBQUksR0FBRyxHQUFZLElBQUksc0JBQU8sRUFBRSxDQUFDO1FBQ2pDLEdBQUcsQ0FBQyxxQkFBcUIsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDO1FBQzFDLEdBQUcsQ0FBQyxjQUFjLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUNwQyxHQUFHLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUMxRCxHQUFHLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7UUFDeEIsR0FBRyxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7UUFDdkIsT0FBTyxJQUFJLDBCQUFXLENBQUksR0FBRyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELEtBQUssQ0FBQyxXQUFXLENBQUMsT0FBd0IsRUFBRSxRQUEwQjtRQUNwRSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdkMsSUFBSSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxQyxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQsVUFBVTtRQUNSLE9BQU8sQ0FBQyxPQUF3QixFQUFFLFFBQTBCLEVBQUUsRUFBRTtZQUM5RCxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUM7aUJBQ2hDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDVixLQUFJLElBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxPQUFPLEVBQUU7b0JBQzFCLFFBQVEsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztpQkFDM0M7Z0JBQ0QsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUNoRCxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBRWIsSUFBSSxHQUFHLFlBQVksbUJBQVEsRUFBRTtvQkFDM0IsS0FBSSxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsT0FBTyxFQUFFO3dCQUMxQixRQUFRLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7cUJBQzNDO29CQUNELFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQy9DLE9BQU87aUJBQ1I7Z0JBRUQsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztZQUNuRixDQUFDLENBQUMsQ0FBQTtRQUNOLENBQUMsQ0FBQTtJQUNILENBQUM7Q0FFRjtBQS9DRCxzREErQ0M7QUFFRCxNQUFhLGNBQWM7SUFJekIsWUFBWSxLQUFhLEVBQUUsTUFBMkI7UUFDcEQsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDdkIsQ0FBQztDQUNGO0FBUkQsd0NBUUM7QUFFRCxJQUFZLFVBTVg7QUFORCxXQUFZLFVBQVU7SUFDcEIseUJBQVcsQ0FBQTtJQUNYLDJCQUFhLENBQUE7SUFDYix5QkFBVyxDQUFBO0lBQ1gsNkJBQWUsQ0FBQTtJQUNmLCtCQUFpQixDQUFBO0FBQ25CLENBQUMsRUFOVyxVQUFVLEdBQVYsa0JBQVUsS0FBVixrQkFBVSxRQU1yQiJ9