import { Schema, ValidatorResult } from "jsonschema";
import { ConnectionPool } from "../utils/connection";
import { Model } from "../models/model";
export declare class MongoDBService<T extends Model> {
    protected connectionPool: ConnectionPool;
    protected schema: Schema;
    protected collection: string;
    protected exclude_fields: string[];
    protected includes: {
        [key: string]: any[] | ((ctx: any) => any[]);
    };
    protected sorts: {
        [key: string]: any[] | ((ctx: any) => any[]);
    };
    protected pre_include: string[];
    protected private_fields: string[];
    protected CRUD_CONFIG: {
        exclude: {
            update: string[];
            isToBeSkipped: (path: string, op: "add" | "update" | "delete") => boolean;
        };
    };
    private validator;
    constructor(connectionPool: ConnectionPool);
    find(filter: {
        [key: string]: any;
    }, skip: number, take: number, fields: string, orderBy: {
        [key: string]: any;
    }, includes?: string[], ctx?: any): Promise<T[]>;
    findById(id: any, fields: string, includes?: string[], ctx?: any): Promise<T>;
    findOne(filter: any, fields: string, includes?: string[], ctx?: any): Promise<T>;
    add(entity: T): Promise<T>;
    updateFromId(entity: T, updateFields: string, fields: string, ctx?: any): Promise<T>;
    updateOne(filter: any, $update: any, fields: string, ctx?: any): Promise<T>;
    updateMany(conditions: any, entity: T, updateFields: string, fields: string): Promise<any>;
    delete(id: any, fields: string): Promise<T>;
    deleteMany(filter: any, fields: string): Promise<T>;
    protected getSorting(aggregate: any[], orderBy: {
        [key: string]: number;
    }, ctx: any): void;
    protected addIncludes(aggregate: any[], includes: string[], ctx: any): void;
    protected getAggregate(filter: any, includes: string[], orderBy: {
        [key: string]: any;
    }, ctx: any): any[];
    protected transform(entity: any): T;
    protected validateEntity(entity: any): ValidatorResult;
    private validate;
}
