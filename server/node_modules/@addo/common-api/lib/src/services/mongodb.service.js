"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MongoDBService = void 0;
const typy_1 = require("typy");
const _ = __importStar(require("lodash"));
const jsonschema_1 = require("jsonschema");
const mongodb_1 = require("mongodb");
const mongodb_utils_1 = require("../utils/mongodb.utils");
const http_error_1 = require("../utils/http.error");
const specialOps_1 = require("../models/specialOps");
class MongoDBService {
    constructor(connectionPool) {
        this.connectionPool = connectionPool;
        this.schema = null;
        this.exclude_fields = [];
        this.includes = {};
        this.sorts = {};
        this.pre_include = [];
        this.private_fields = [];
        this.CRUD_CONFIG = {
            exclude: {
                update: ["created"],
                isToBeSkipped: (path, op) => {
                    return (this.CRUD_CONFIG.exclude[op].find((u) => {
                        u = u.indexOf(".*") > -1 ? u.replace(".*", "") : u;
                        return path.indexOf(u) > -1;
                    }) != null);
                },
            },
        };
        this.validator = new jsonschema_1.Validator();
    }
    async find(filter, skip, take, fields, orderBy, includes = [], ctx = {}) {
        let client = await this.connectionPool.connectToDatabase(process.env.MONGODB_CONNECTION_STRING);
        let aggregate = this.getAggregate(filter, includes, orderBy, ctx || {});
        return await client
            .db()
            .collection(this.collection)
            .aggregate(aggregate)
            .sort(orderBy)
            .skip(skip)
            .limit(take)
            .project(mongodb_utils_1.MongoDbUtils.parseFields(fields, this.private_fields))
            .toArray()
            .then((res) => {
            for (let r of res) {
                this.transform(r);
            }
            return res;
        })
            .catch((err) => {
            throw new http_error_1.HttpError(err.message, err, 500);
        });
    }
    async findById(id, fields, includes = [], ctx = {}) {
        let client = await this.connectionPool.connectToDatabase(process.env.MONGODB_CONNECTION_STRING);
        let aggregate = [{ $match: { _id: new mongodb_1.ObjectId(id) } }];
        this.addIncludes(aggregate, includes, ctx || {});
        return await client
            .db()
            .collection(this.collection)
            .aggregate(aggregate)
            .project(mongodb_utils_1.MongoDbUtils.parseFields(fields, this.private_fields))
            .toArray()
            .then((res) => {
            if (res[0]) {
                res[0] = this.transform(res[0]);
            }
            return res[0];
        })
            .catch((err) => {
            throw new http_error_1.HttpError(err.message, err, 500);
        });
    }
    async findOne(filter, fields, includes = [], ctx = {}) {
        let aggregate = this.getAggregate(filter, includes, {}, ctx || {});
        let client = await this.connectionPool.connectToDatabase(process.env.MONGODB_CONNECTION_STRING);
        return await client
            .db()
            .collection(this.collection)
            .aggregate(aggregate)
            .skip(0)
            .limit(1)
            .project(mongodb_utils_1.MongoDbUtils.parseFields(fields, this.private_fields))
            .toArray()
            .then((res) => {
            if (res[0]) {
                res[0] = this.transform(res[0]);
            }
            return res[0];
        })
            .catch((err) => {
            throw new http_error_1.HttpError(err.message, err, 500);
        });
    }
    async add(entity) {
        try {
            this.validate(entity);
            let client = await this.connectionPool.connectToDatabase(process.env.MONGODB_CONNECTION_STRING);
            let collection = await client.db().collection(this.collection);
            let result = await collection.insertOne(entity);
            return collection
                .findOne({ _id: result.insertedId })
                .then((res) => {
                if (res) {
                    res = this.transform(res);
                }
                return res;
            })
                .catch((err) => {
                throw new http_error_1.HttpError(err.message, err, 500);
            });
        }
        catch (err) {
            throw new http_error_1.HttpError(err.message, err, 500);
        }
    }
    async updateFromId(entity, updateFields, fields, ctx = {}) {
        let client = await this.connectionPool.connectToDatabase(process.env.MONGODB_CONNECTION_STRING);
        let collection = await client.db().collection(this.collection);
        let $update = {};
        let $set = {};
        updateFields = updateFields.replace(/,/g, " ");
        fields = fields.replace(/,/g, " ");
        for (let field of updateFields.split(" ")) {
            if (this.CRUD_CONFIG.exclude.isToBeSkipped(field, "update"))
                continue;
            if (field[0] == "$") {
                let matches = field.split(":");
                let key = matches[1];
                let value = _.get(entity, key);
                if (matches[2] && matches[2][0] == ".") {
                    value = ctx[matches[2].replace(".", "")];
                }
                Object.assign($update, specialOps_1.SpecialOps.getOp(matches[0])(key, value));
                console.log("Special update data: ", {
                    matches,
                    key,
                    value,
                    $set,
                    ctx,
                });
                continue;
            }
            _.set($set, field, typy_1.t(entity, field).safeObject);
        }
        if (Object.keys($set).length > 0) {
            $update.$set = $set;
        }
        return collection
            .findOneAndUpdate({ _id: new mongodb_1.ObjectId(entity.id) }, $update, {
            projection: mongodb_utils_1.MongoDbUtils.parseFields(fields, this.private_fields),
        })
            .then((result) => {
            let res = result.value;
            if (res) {
                res = this.transform(res);
            }
            return res;
        })
            .catch((err) => {
            throw new http_error_1.HttpError(err.message, err, 500);
        });
    }
    async updateOne(filter, $update, fields, ctx = {}) {
        let client = await this.connectionPool.connectToDatabase(process.env.MONGODB_CONNECTION_STRING);
        let collection = await client.db().collection(this.collection);
        return collection
            .findOneAndUpdate(filter, $update, {
            projection: mongodb_utils_1.MongoDbUtils.parseFields(fields, this.private_fields),
        })
            .then((result) => {
            let res = result.value;
            if (res) {
                res = this.transform(res);
            }
            return res;
        })
            .catch((err) => {
            throw new http_error_1.HttpError(err.message, err, 500);
        });
    }
    async updateMany(conditions, entity, updateFields, fields) {
        let client = await this.connectionPool.connectToDatabase(process.env.MONGODB_CONNECTION_STRING);
        let collection = await client.db().collection(this.collection);
        let $set = {};
        updateFields = updateFields.replace(/,/g, " ");
        fields = fields.replace(/,/g, " ");
        for (let field of updateFields.split(" ")) {
            if (this.CRUD_CONFIG.exclude.isToBeSkipped(field, "update"))
                continue;
            if (field[0] == "$") {
                let specialOp = field.split(":")[0];
                let key = field.split(":")[1];
                Object.assign($set, specialOps_1.SpecialOps.getOp(specialOp)(key, _.get(entity, key)));
                continue;
            }
            _.set($set, field, typy_1.t(entity, field).safeObject);
        }
        return collection
            .updateMany(conditions, { $set })
            .then((result) => {
            let res = result.result;
            return res;
        })
            .catch((err) => {
            throw new http_error_1.HttpError(err.message, err, 500);
        });
    }
    async delete(id, fields) {
        let client = await this.connectionPool.connectToDatabase(process.env.MONGODB_CONNECTION_STRING);
        let collection = await client.db().collection(this.collection);
        return collection
            .findOneAndDelete({ _id: id }, { projection: mongodb_utils_1.MongoDbUtils.parseFields(fields, this.private_fields) })
            .then((result) => {
            let res = result.value;
            if (res) {
                res = this.transform(res);
            }
            return res;
        })
            .catch((err) => {
            throw new http_error_1.HttpError(err.message, err, 500);
        });
    }
    async deleteMany(filter, fields) {
        let client = await this.connectionPool.connectToDatabase(process.env.MONGODB_CONNECTION_STRING);
        let collection = await client.db().collection(this.collection);
        return collection
            .findOneAndDelete(filter, {
            projection: mongodb_utils_1.MongoDbUtils.parseFields(fields, this.private_fields),
        })
            .then((result) => {
            let res = result.value;
            if (res) {
                res = this.transform(res);
            }
            return res;
        })
            .catch((err) => {
            throw new http_error_1.HttpError(err.message, err, 500);
        });
    }
    getSorting(aggregate, orderBy, ctx) {
        for (let key in orderBy) {
            if (!this.includes[key])
                continue;
            let commands = this.includes[key];
            if (!commands)
                return;
            if (typeof commands === "function") {
                let _function = commands;
                commands = _function(ctx);
            }
            aggregate.push(...commands);
        }
    }
    addIncludes(aggregate, includes, ctx) {
        for (let include of new Set([...this.pre_include, ...includes])) {
            let commands = this.includes[include];
            if (!commands)
                return;
            if (typeof commands === "function") {
                let _function = commands;
                commands = _function(ctx);
            }
            aggregate.push(...commands);
        }
    }
    getAggregate(filter, includes, orderBy, ctx) {
        let aggregate = [{ $match: filter }];
        if (filter["#pre"] || filter["#post"]) {
            aggregate = [];
        }
        if (filter["#pre"])
            aggregate.push({ $match: filter["#pre"] });
        this.addIncludes(aggregate, includes, ctx || {});
        if (filter["#post"])
            aggregate.push({ $match: filter["#post"] });
        this.getSorting(aggregate, orderBy, ctx);
        console.log("Aggregate: ", aggregate);
        return aggregate;
    }
    transform(entity) {
        entity.id = entity._id;
        delete entity._id;
        return _.omit(entity, this.exclude_fields);
    }
    validateEntity(entity) {
        if (this.schema) {
            return this.validator.validate(entity, this.schema);
        }
        return {
            valid: true,
            disableFormat: true,
            errors: [],
            instance: entity,
            throwError: false,
            schema: null,
            propertyPath: null,
            addError: () => null,
        };
    }
    validate(entity, throwError = true) {
        var _a, _b;
        let result = this.validateEntity(entity);
        if (!result.valid) {
            let error = {
                code: "_ENTITY_VALIDATION",
                message: `The ${(_a = this.schema) === null || _a === void 0 ? void 0 : _a.title} entity is invalid!`,
                verbose_message: `The ${(_b = this.schema) === null || _b === void 0 ? void 0 : _b.title} entity is invalid!
        
        The entity have this errors: 
        `,
                errors: result.errors
            };
            for (let e of result.errors) {
                error.message += `  - ${e.message}\n`;
            }
            if (throwError)
                throw error;
            return error;
        }
        return true;
    }
}
exports.MongoDBService = MongoDBService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZ29kYi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NlcnZpY2VzL21vbmdvZGIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsK0JBQXlCO0FBQ3pCLDBDQUE0QjtBQUM1QiwyQ0FBZ0U7QUFFaEUscUNBQW1DO0FBRW5DLDBEQUFzRDtBQUN0RCxvREFBZ0Q7QUFFaEQscURBQWtEO0FBRWxELE1BQWEsY0FBYztJQXlCekIsWUFBc0IsY0FBOEI7UUFBOUIsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBdkIxQyxXQUFNLEdBQVcsSUFBSSxDQUFDO1FBRXRCLG1CQUFjLEdBQWEsRUFBRSxDQUFDO1FBQzlCLGFBQVEsR0FBcUQsRUFBRSxDQUFDO1FBQ2hFLFVBQUssR0FBcUQsRUFBRSxDQUFDO1FBQzdELGdCQUFXLEdBQWEsRUFBRSxDQUFDO1FBQzNCLG1CQUFjLEdBQWEsRUFBRSxDQUFDO1FBQzlCLGdCQUFXLEdBQUc7WUFDdEIsT0FBTyxFQUFFO2dCQUNQLE1BQU0sRUFBRSxDQUFDLFNBQVMsQ0FBQztnQkFDbkIsYUFBYSxFQUFFLENBQUMsSUFBWSxFQUFFLEVBQStCLEVBQUUsRUFBRTtvQkFDL0QsT0FBTyxDQUNMLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO3dCQUN0QyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDbkQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO29CQUM5QixDQUFDLENBQUMsSUFB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